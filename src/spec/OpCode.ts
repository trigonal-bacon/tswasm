import { WASMValueType } from "./Types";

export enum WASMOPCode {
    op_unreachable = 0x00,
    op_nop = 0x01,
    op_block = 0x02,
    op_loop = 0x03,
    op_if = 0x04,
    op_else = 0x05,
    op_end = 0x0b,
    op_br = 0x0c,
    op_br_if = 0x0d,
    op_br_table = 0x0e,
    op_return = 0x0f,
    op_call = 0x10,
    op_call_indirect = 0x11,
    op_drop = 0x1a,
    op_select = 0x1b,
    op_local_get = 0x20,
    op_local_set = 0x21,
    op_local_tee = 0x22,
    op_global_get = 0x23,
    op_global_set = 0x24,
    op_i32_load = 0x28,
    op_i64_load = 0x29,
    op_f32_load = 0x2a,
    op_f64_load = 0x2b,
    op_i32_load8_s = 0x2c,
    op_i32_load8_u = 0x2d,
    op_i32_load16_s = 0x2e,
    op_i32_load16_u = 0x2f,
    op_i64_load8_s = 0x30,
    op_i64_load8_u = 0x31,
    op_i64_load16_s = 0x32,
    op_i64_load16_u = 0x33,
    op_i64_load32_s = 0x34,
    op_i64_load32_u = 0x35,
    op_i32_store = 0x36,
    op_i64_store = 0x37,
    op_f32_store = 0x38,
    op_f64_store = 0x39,
    op_i32_store8 = 0x3a,
    op_i32_store16 = 0x3b,
    op_i64_store8 = 0x3c,
    op_i64_store16 = 0x3d,
    op_i64_store32 = 0x3e,
    op_memory_size = 0x3f,
    op_memory_grow = 0x40,
    op_i32_const = 0x41,
    op_i64_const = 0x42,
    op_f32_const = 0x43,
    op_f64_const = 0x44,
    op_i32_eqz = 0x45,
    op_i32_eq = 0x46,
    op_i32_ne = 0x47,
    op_i32_lt_s = 0x48,
    op_i32_lt_u = 0x49,
    op_i32_gt_s = 0x4a,
    op_i32_gt_u = 0x4b,
    op_i32_le_s = 0x4c,
    op_i32_le_u = 0x4d,
    op_i32_ge_s = 0x4e,
    op_i32_ge_u = 0x4f,
    op_i64_eqz = 0x50,
    op_i64_eq = 0x51,
    op_i64_ne = 0x52,
    op_i64_lt_s = 0x53,
    op_i64_lt_u = 0x54,
    op_i64_gt_s = 0x55,
    op_i64_gt_u = 0x56,
    op_i64_le_s = 0x57,
    op_i64_le_u = 0x58,
    op_i64_ge_s = 0x59,
    op_i64_ge_u = 0x5a,
    op_f32_eq = 0x5b,
    op_f32_ne = 0x5c,
    op_f32_lt = 0x5d,
    op_f32_gt = 0x5e,
    op_f32_le = 0x5f,
    op_f32_ge = 0x60,
    op_f64_eq = 0x61,
    op_f64_ne = 0x62,
    op_f64_lt = 0x63,
    op_f64_gt = 0x64,
    op_f64_le = 0x65,
    op_f64_ge = 0x66,
    op_i32_clz = 0x67,
    op_i32_ctz = 0x68,
    op_i32_popcnt = 0x69,
    op_i32_add = 0x6a,
    op_i32_sub = 0x6b,
    op_i32_mul = 0x6c,
    op_i32_div_s = 0x6d,
    op_i32_div_u = 0x6e,
    op_i32_rem_s = 0x6f,
    op_i32_rem_u = 0x70,
    op_i32_and = 0x71,
    op_i32_or = 0x72,
    op_i32_xor = 0x73,
    op_i32_shl = 0x74,
    op_i32_shr_s = 0x75,
    op_i32_shr_u = 0x76,
    op_i32_rotl = 0x77,
    op_i32_rotr = 0x78,
    op_i64_clz = 0x79,
    op_i64_ctz = 0x7a,
    op_i64_popcnt = 0x7b,
    op_i64_add = 0x7c,
    op_i64_sub = 0x7d,
    op_i64_mul = 0x7e,
    op_i64_div_s = 0x7f,
    op_i64_div_u = 0x80,
    op_i64_rem_s = 0x81,
    op_i64_rem_u = 0x82,
    op_i64_and = 0x83,
    op_i64_or = 0x84,
    op_i64_xor = 0x85,
    op_i64_shl = 0x86,
    op_i64_shr_s = 0x87,
    op_i64_shr_u = 0x88,
    op_i64_rotl = 0x89,
    op_i64_rotr = 0x8a,
    op_f32_abs = 0x8b,
    op_f32_neg = 0x8c,
    op_f32_ceil = 0x8d,
    op_f32_floor = 0x8e,
    op_f32_trunc = 0x8f,
    op_f32_nearest = 0x90,
    op_f32_sqrt = 0x91,
    op_f32_add = 0x92,
    op_f32_sub = 0x93,
    op_f32_mul = 0x94,
    op_f32_div = 0x95,
    op_f32_min = 0x96,
    op_f32_max = 0x97,
    op_f32_copysign = 0x98,
    op_f64_abs = 0x99,
    op_f64_neg = 0x9a,
    op_f64_ceil = 0x9b,
    op_f64_floor = 0x9c,
    op_f64_trunc = 0x9d,
    op_f64_nearest = 0x9e,
    op_f64_sqrt = 0x9f,
    op_f64_add = 0xa0,
    op_f64_sub = 0xa1,
    op_f64_mul = 0xa2,
    op_f64_div = 0xa3,
    op_f64_min = 0xa4,
    op_f64_max = 0xa5,
    op_f64_copysign = 0xa6,
    op_i32_wrap_i64 = 0xa7,
    op_i32_trunc_f32_s = 0xa8,
    op_i32_trunc_f32_u = 0xa9,
    op_i32_trunc_f64_s = 0xaa,
    op_i32_trunc_f64_u = 0xab,
    op_i64_extend_i32_s = 0xac,
    op_i64_extend_i32_u = 0xad,
    op_i64_trunc_f32_s = 0xae,
    op_i64_trunc_f32_u = 0xaf,
    op_i64_trunc_f64_s = 0xb0,
    op_i64_trunc_f64_u = 0xb1,
    op_f32_convert_i32_s = 0xb2,
    op_f32_convert_i32_u = 0xb3,
    op_f32_convert_i64_s = 0xb4,
    op_f32_convert_i64_u = 0xb5,
    op_f32_demote_f64 = 0xb6,
    op_f64_convert_i32_s = 0xb7,
    op_f64_convert_i32_u = 0xb8,
    op_f64_convert_i64_s = 0xb9,
    op_f64_convert_i64_u = 0xba,
    op_f64_promote_f32 = 0xbb,
    op_i32_reinterpret_f32 = 0xbc,
    op_i64_reinterpret_f64 = 0xbd,
    op_f32_reinterpret_i32 = 0xbe,
    op_f64_reinterpret_i64 = 0xbf,
    op_i32_extend8_s = 0xc0,
    op_i32_extend16_s = 0xc1,
    op_i64_extend8_s = 0xc2,
    op_i64_extend16_s = 0xc3,
    op_i64_extend32_s = 0xc4,
    op_i32_trunc_sat_f32_s = 0x00fc,
    op_i32_trunc_sat_f32_u = 0x01fc,
    op_i32_trunc_sat_f64_s = 0x02fc,
    op_i32_trunc_sat_f64_u = 0x03fc,
    op_i64_trunc_sat_f32_s = 0x04fc,
    op_i64_trunc_sat_f32_u = 0x05fc,
    op_i64_trunc_sat_f64_s = 0x06fc,
    op_i64_trunc_sat_f64_u = 0x07fc,
    op_memory_copy = 0x0afc,
    op_memory_fill = 0x0bfc,
};

//prepare multivalue
export class WASMOPDef {
    args : Array<WASMValueType>;
    rets : Array<WASMValueType>;
    constructor(args : Array<WASMValueType> = [], rets : Array<WASMValueType> = []) {
        this.args = args;
        this.rets = rets;
    }
}

export const WASMOPDefs : Record<WASMOPCode, WASMOPDef> = {
    [WASMOPCode.op_unreachable] : new WASMOPDef([], []),
    [WASMOPCode.op_nop] : new WASMOPDef([], []),
    [WASMOPCode.op_block] : new WASMOPDef([], []),
    [WASMOPCode.op_loop] : new WASMOPDef([], []),
    [WASMOPCode.op_if] : new WASMOPDef([], []),
    [WASMOPCode.op_else] : new WASMOPDef([], []),
    [WASMOPCode.op_end] : new WASMOPDef([], []),
    [WASMOPCode.op_br] : new WASMOPDef([], []),
    [WASMOPCode.op_br_if] : new WASMOPDef([ WASMValueType.i32 ], []),
    [WASMOPCode.op_br_table] : new WASMOPDef([ WASMValueType.i32 ], []),
    [WASMOPCode.op_return] : new WASMOPDef([], []),
    [WASMOPCode.op_call] : new WASMOPDef([], []),
    [WASMOPCode.op_call_indirect] : new WASMOPDef([], []),
    [WASMOPCode.op_drop] : new WASMOPDef([], []),
    [WASMOPCode.op_select] : new WASMOPDef([], []),
    [WASMOPCode.op_local_get] : new WASMOPDef([], []),
    [WASMOPCode.op_local_set] : new WASMOPDef([], []),
    [WASMOPCode.op_local_tee] : new WASMOPDef([], []),
    [WASMOPCode.op_global_get] : new WASMOPDef([], []),
    [WASMOPCode.op_global_set] : new WASMOPDef([], []),
    [WASMOPCode.op_i32_load] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_load] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_f32_load] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f64_load] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f64]),
    [WASMOPCode.op_i32_load8_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_load8_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_load16_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_load16_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_load8_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_load8_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_load16_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_load16_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_load32_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_load32_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i32_store] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], []),
    [WASMOPCode.op_i64_store] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i64 ], []),
    [WASMOPCode.op_f32_store] : new WASMOPDef([ WASMValueType.i32, WASMValueType.f32 ], []),
    [WASMOPCode.op_f64_store] : new WASMOPDef([ WASMValueType.i32, WASMValueType.f64 ], []),
    [WASMOPCode.op_i32_store8] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], []),
    [WASMOPCode.op_i32_store16] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], []),
    [WASMOPCode.op_i64_store8] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i64 ], []),
    [WASMOPCode.op_i64_store16] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i64 ], []),
    [WASMOPCode.op_i64_store32] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i64 ], []),
    [WASMOPCode.op_memory_size] : new WASMOPDef([], [WASMValueType.i32]),
    [WASMOPCode.op_memory_grow] : new WASMOPDef([], [WASMValueType.i32]),
    [WASMOPCode.op_i32_const] : new WASMOPDef([], [WASMValueType.i32]),
    [WASMOPCode.op_i64_const] : new WASMOPDef([], [WASMValueType.i64]),
    [WASMOPCode.op_f32_const] : new WASMOPDef([], [WASMValueType.f32]),
    [WASMOPCode.op_f64_const] : new WASMOPDef([], [WASMValueType.f64]),
    [WASMOPCode.op_i32_eqz] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_eq] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_ne] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_lt_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_lt_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_gt_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_gt_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_le_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_le_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_ge_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_ge_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_eqz] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_eq] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_ne] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_lt_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_lt_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_gt_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_gt_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_le_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_le_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_ge_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_ge_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_eq] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_ne] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_lt] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_gt] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_le] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f32_ge] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_eq] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_ne] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_lt] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_gt] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_le] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_f64_ge] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_clz] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_ctz] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_popcnt] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_add] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_sub] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_mul] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_div_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_div_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_rem_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_rem_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_and] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_or] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_xor] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_shl] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_shr_s] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_shr_u] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_rotl] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_rotr] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_clz] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_ctz] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_popcnt] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_add] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_sub] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_mul] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_div_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_div_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_rem_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_rem_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_and] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_or] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_xor] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_shl] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_shr_s] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_shr_u] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_rotl] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_rotr] : new WASMOPDef([ WASMValueType.i64, WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_f32_abs] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_neg] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_ceil] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_floor] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_trunc] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_nearest] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_sqrt] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_add] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_sub] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_mul] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_div] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_min] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_max] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_copysign] : new WASMOPDef([ WASMValueType.f32, WASMValueType.f32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f64_abs] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_neg] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_ceil] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_floor] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_trunc] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_nearest] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_sqrt] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_add] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_sub] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_mul] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_div] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_min] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_max] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_copysign] : new WASMOPDef([ WASMValueType.f64, WASMValueType.f64 ], [WASMValueType.f64]),
    [WASMOPCode.op_i32_wrap_i64] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_f32_s] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_f32_u] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_f64_s] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_f64_u] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_extend_i32_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_extend_i32_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_f32_s] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_f32_u] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_f64_s] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_f64_u] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i64]),
    [WASMOPCode.op_f32_convert_i32_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_convert_i32_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_convert_i64_s] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_convert_i64_u] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.f32]),
    [WASMOPCode.op_f32_demote_f64] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.f32]),
    [WASMOPCode.op_f64_convert_i32_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_convert_i32_u] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_convert_i64_s] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_convert_i64_u] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.f64]),
    [WASMOPCode.op_f64_promote_f32] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.f64]),
    [WASMOPCode.op_i32_reinterpret_f32] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_reinterpret_f64] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i64]),
    [WASMOPCode.op_f32_reinterpret_i32] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.f32]),
    [WASMOPCode.op_f64_reinterpret_i64] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.f64]),
    [WASMOPCode.op_i32_extend8_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_extend16_s] : new WASMOPDef([ WASMValueType.i32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_extend8_s] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_extend16_s] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_extend32_s] : new WASMOPDef([ WASMValueType.i64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i32_trunc_sat_f32_s] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_sat_f32_u] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_sat_f64_s] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i32_trunc_sat_f64_u] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i32]),
    [WASMOPCode.op_i64_trunc_sat_f32_s] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_sat_f32_u] : new WASMOPDef([ WASMValueType.f32 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_sat_f64_s] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i64]),
    [WASMOPCode.op_i64_trunc_sat_f64_u] : new WASMOPDef([ WASMValueType.f64 ], [WASMValueType.i64]),
    [WASMOPCode.op_memory_copy] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32, WASMValueType.i32 ], []),
    [WASMOPCode.op_memory_fill] : new WASMOPDef([ WASMValueType.i32, WASMValueType.i32, WASMValueType.i32 ], [])
}